<?php

namespace App;

use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Support\Facades\Auth;

class User extends Authenticatable
{
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'last_name', 'first_name', 'name', 'email', 'password', 'user',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::created(function ($user) {
            $buzonE = FolderName::firstOrCreate(['name' => 'inbox']);
            $buzonS = FolderName::firstOrCreate(['name' => 'outbox']);
            $draft = FolderName::firstOrCreate(['name' => 'draft']);
            $junked = FolderName::firstOrCreate(['name' => 'junked']);
            Folder::firstOrCreate([
                'folder_name_id' => $buzonE->id,
                'user_id' => $user->id,
            ]);
            Folder::firstOrCreate([
                'folder_name_id' => $buzonS->id,
                'user_id' => $user->id,
            ]);
            Folder::firstOrCreate([
                'folder_name_id' => $draft->id,
                'user_id' => $user->id,
            ]);
            Folder::firstOrCreate([
                'folder_name_id' => $junked->id,
                'user_id' => $user->id,
            ]);
        });
    }

    public function folderNames()
    {
        return $this->belongsToMany(FolderName::class, 'folders');
    }

    public function mails()
    {
        return $this->hasMany(Mail::class);
    }

    public function rosters()
    {
        return $this->hasMany(Roster::class);
    }

    public function folders()
    {
        return $this->hasMany(Folder::class);
    }


}
